#!/usr/bin/perl
#
# Uses these scripts:
# -none-
#
# and these files:
# as-called abc
# 
# it makes these files:
# temp.abc
#

$input = $ARGV[0];

# First thing, compare to blacklist
$ohroot=`ohroot`;
$ohroot=~ s/\n//;
$bl = $ohroot . "bin/midi-blacklist";
open (BL, "<$bl");
$infilename=$input;
$infilename =~ s/^.*\///;
while ( <BL> ) {
	$_ =~ s/\n//;
	if ( $infilename eq $_ ) {
		print STDERR "file ".$infilename." is blacklisted against building a midi\n";
		exit;
	}
}
close BL;

open (INFILE, "<$input");
@parts=split ("/",$input);
$fn=$parts[$#parts];
$fn=substr($fn,0,length($fn)-4);
#print STDERR $input,"\n";
# READ IN EVERYTHING
$extras = "\n";
$tags = "";
$auth = "";
$prehead = "";
$stafftofind = "nevergoingtofindthis";
$found=0;
$max=0;
$staff = -1;
$startedstaves = 0;
for ($i=0; $i < 50; $i++) { # max 50 staffs
	$numlyrics[$i] = 0;
}
while (<INFILE>) {
   if (/%OHTOPICS/) {
		$tags = $_;
		$tags =~ s/\{([^\}\(]*)[,] ([^\}]*)\}/\1 \(\2\)/g;
		$tags =~ s/\{//g;
		$tags =~ s/\}//g;
		$tags =~ s/[\[][0-9,-]*[\]]//g;
		$tags =~ s/%OHTOPICS//;
		$tags =~ s/^\s*//g;
		$tags =~ s/\s*$//g;
		$tags =~ s/\s+[,]/,/g;
   }
   if (/T:/) {
   	if ( length($title) > 0 ) {
   		$title .= " ";
   	}
      $title = $title . $_;
      $title =~ s/T: //;
      $title =~ s/\n//;
   }
   if (/C:/) {
      $auth = $auth . $_;
      $auth =~ s/C: //;
      $auth =~ s/\n//;
   }
   if (/w:/) {
   	#print STDERR "staff ",$staff,"\n";
   	#print STDERR "numlyrics[staff] ",$numlyrics[$staff],"\n";
   	$lyr[$staff][$numlyrics[$staff]] = $_;
   	$lyr[$staff][$numlyrics[$staff]] =~ s/\n//;
   	$lyr[$staff][$numlyrics[$staff]] =~ s/^w: //;
   	#$lyr[$staff][$numlyrics[$staff]] =~ s/[*] //g;
   	#$lyr[$staff][$numlyrics[$staff]] =~ s/[-] //g;
   	#$lyr[$staff][$numlyrics[$staff]] =~ s/([^\\])[-] /\1/g;
   	#$lyr[$staff][$numlyrics[$staff]] =~ s/[\\][-]/-/g;
   	$lyr[$staff][$numlyrics[$staff]] =~ s/^([0-9]+.)~/\1 /g;
   	$numlyrics[$staff]++;
   	#print STDERR "Staff ",$staff," lyrics:",$_;
      $found += 1;
      if ($found > $max) { $max = $found; };
      $lyrics[$found] = $lyrics[$found] . $_;
      $last = $_;
	}
   elsif (/W:/) {
  			$_ =~ s/^W:\s*//;
  			$_ =~ s/^([0-9]+[.])/\n\1\\t/; 
  			$_ =~ s/^([A-Za-z'"])/\\t\1/; 
	   	#$_ =~ s/[\\][-]/-/g;
	   	#print STDERR "ADDING1 ",$_;
     		$extras = $extras . $_ ;
   }
   elsif (/%%begintext/) {
  			#$extras = $extras . $_ ;
  			if ( $startedstaves == 1 ) {
	  			$_ = <INFILE>;
	   		while ( ! /%%endtext/ ) {
	   			$_ =~ s/^%% //;
	   			$_ =~ s/^%%//;
			   	#$_ =~ s/[\\][-]/-/g;
	   	#print STDERR "ADDING2 ",$_;
	     			$extras = $extras . $_ ;
		  			$_ = <INFILE>;
	     		}
     		}
     		else {
	  			$_ = <INFILE>;
	   		while ( ! /%%endtext/ ) {
	   			$_ =~ s/^%% //;
	   			$_ =~ s/^%%//;
			   	#$_ =~ s/[\\][-]/-/g;
	     			$prehead = $prehead . $_ ;
		  			$_ = <INFILE>;
	     		}
     		}
   }
   else {
   	if ( /\[V\: S/ && $staff == -1 ) {
   		$stafftofind = $_;
   		$stafftofind =~ s/\].*$/\]/;
   		$stafftofind =~ s/^.*\[/\[/;
   		$stafftofind =~ s/\n//;
   		#$stafftofind =~ s/[:]/\[:\]/;
   		#$stafftofind =~ s/\]$/\[\\\]\]/;
   		#$stafftofind =~ s/^\[/\[\\\[\]/;
   		#print STDERR "lyrics after ",$stafftofind,"\n";
   	}
   	
   	if ( index ($_, $stafftofind) >= 0 ) {
   		$staff++;
   		#print STDERR "new staff ",$_,"\n";
   		$startedstaves = 1;
   	}
   	#elsif ( length($stafftofind) < 20 ) {
   	#	print STDERR "rejected {",$_,"}\nsearch is {",$stafftofind,"}index is ",index ($_, $stafftofind),"\n";
   	#}
   	
      if (($found > 0) && ($found < $max)) {
         for ($i=$found+1; $i <= $max; $i++) {
   		   $lyrics[$i] = $lyrics[$i] . $last;
         }
         $reallast = $last;
         $found = $max;
      }
      $found=0;
      }
}
close INFILE;

$maxlyr = $numlyrics[0];
for ($i=0; $i <= $staff; $i++) { 
	if ( $numlyrics[$i] > $maxlyr) {
		$maxlyr = $numlyrics[$i];
	}
}
#print STDERR "maxlyr is ",$maxlyr,"\n";

#for ($i=0; $i <= $staff; $i++) { 
#	if (( $numlyrics[$i] != $maxlyr) && ( $numlyrics[$i] != 1 )) {
#		print STDERR "WARNING FOR STAFF ",$i+1," - THINGS LOOK TOO WEIRD, EXITING ",$input,"\n";
#		
#		exit;
#	}
#}

if ( $extras ne "\n" ) {
	# if extras begin with [0-9] or \t, then it's a verse.  Otherwise, a comment or heading
	# a comment is after all verses, a heading is at the top or in the middle
	$vnum = 0; #should this be 0 or $maxlyr?
	while ( length($extras) > 0 ) {
		$next = $vnum+$maxlyr+1;
		$string = "\n[ ]*" . $next . "[.]";
		@parts = split $string, $extras;
		$vnum++;
		$extras = $parts[1];
		if( length($parts[2]) > 0 ) {
			print STDERR "\n\nWARNING ON EXTRAS!!!!!\n\n";
		}
	}
}
else {$vnum = 1;}

$numverses = $vnum+$maxlyr-1;
print STDERR "total verses: ",$numverses,"\n";
open (INFILE, "<$input");
$intomusic = 0;
$numstaves = 0;
$numcorelines = 0;
$currstaff = 0;
$in_intro = 0;
$core = "";
while (<INFILE>) {
	if ( $intomusic == 2 ) {
		if ( ( /%%staves / ) || ( /^\[V: [A-Za-z0-9]+\]/ ) ) {
			print STDERR "Looks like more music after final lyric start - giving up!\n";
			exit;
		}
		$tail .= $_;
	}
	elsif ( $intomusic == 1 ) {
		if ( /^W:/ ) {
			$intomusic = 2;
			$tail = $_;
		}
		elsif ( /%%multicol start/ ) {
			$intomusic = 2;
			$tail = $_;
		}
		else {
			if ( /%%staves / ) {
				print STDERR "abc2midi cannot handle mulitple staff patterns - giving up!\n";
				exit;
			}
			elsif ( /^\[V: [A-Za-z0-9]+\]/ ) {
				$core .= $_;
				$last[$currstaff] = $_;
				$numcorelines++;
				$currstaff++;
				$currstaff = $currstaff % $numstaves;
				if ( /!sintro!/ ) {
					$introtmp = $_;
					$introtmp =~ s/^.*!sintro!//;
					$introtmp =~ s/!eintro!.*$//;
					$intro .= $introtmp;
					if ( ! /!eintro!/ ) {
						$in_intro = 1;
					}	
					$introvoice = $_;
					$introvoice =~ s/^\[V: //;
					$introvoice =~ s/\].*\n//;
					#print STDERR "intro ",$intro;
				}
				elsif ( $in_intro == 1 ) {
					print STDERR "continued in_intro\n";
				exit;
				}
			}
		}
	}
	else {
		if ( $numstaves == 0 ) {
			if ( /%%staves / ) {
				$staves = $_;
				$staves =~ s/\n//;
				$staves =~ s/%%staves //;
				$staves =~ s/\(/ /g;
				$staves =~ s/\)/ /g;
				$staves =~ s/\{/ /g;
				$staves =~ s/\}/ /g;
				$staves =~ s/\|/ /g;
				$staves =~ s/  / /g;
				$staves =~ s/  / /g;
				$staves =~ s/  / /g;
				$staves =~ s/  / /g;
				$staves =~ s/^ //g;
				$staves =~ s/ $//g;
				$numstaves = $staves;
				#print STDERR $numstaves," staves\n";
				$numstaves =~ s/[A-Za-z0-9]*/@/g;
	#			print STDERR $numstaves," staves\n";
				$numstaves =~ s/@@/@/g;
				$numstaves =~ s/@ /@/g;
	#			print STDERR $numstaves," staves\n";
				$numstaves = length($numstaves);
				#print STDERR $numstaves," staves\n";
			}
			$head .= $_;
		}
		else {
			if ( /^\[V: [A-Za-z0-9]+\]/ ) {
				$core .= $_;
				$last[$currstaff] = $_;
				$intomusic = 1;
				$currstaff++;
				$q = $_;
				$q =~ s/\n//;
				$q =~ s/^.* \[Q:/[Q:/;
				$q =~ s/\].*$/]/;
				if ( /!sintro!/ ) {
					$intro = $_;
					$intro =~ s/^.*!sintro!//;
					$intro =~ s/!eintro!.*$//;
					if ( ! /!eintro!/ ) {
						$in_intro = 1;
					}	
					$introvoice = $_;
					$introvoice =~ s/^\[V: //;
					$introvoice =~ s/\].*\n//;
					#print STDERR "intro ",$intro;
				}
				#print STDERR $q," tempo\n";
			}
			else {
				$head .= $_;
			}			
		}
	}
	
}
close INFILE;

#$intro = $core;

open OUTFILE, "> temp.abc";
#still need better intro start 
print OUTFILE $head;

$lastbar = $last[0];
$lastbar =~ s/^.*([|\]][|\]])\s?\n/\1/;
if ( $lastbar eq "||" ) {
	#print STDERR $lastbar,"\n";
	print STDERR "need to add refrain hymn ",$input,"\n";
	# peel back from end until a "|]" is found
	@parts = split '\|\]', $core;
	$lastbar = "";
	for ($i=1; $i < @parts; $i++) {
		#print STDERR "add: ",$parts[$i-1],"\n";
		$lastbar .= $parts[$i-1] . "|]";
	}
	#print STDERR "LASTBAR: ",$lastbar,"\n";
}
else {
	$lastbar="";
}

# add tempo to first voice in intro
	$voicemark = $last[0];
	$voicemark =~ s/\].*\n/\] /;
	$notes = $last[0];
	$notes =~ s/^[^\]]*\]//;
	$last[0] = $voicemark . $q . $notes;
	$intro =~ s/^.*!sintro!//;
	$intro =~ s/!eintro!.*$//;
	#print STDERR "intro ",$intro;
	$last[0] = $voicemark . $q . $intro;

#remove all but first voice in intro
for ($i=1; $i < $numstaves; $i++) {
	$voicemark = $last[$i];
	$voicemark =~ s/\].*\n/\] /;
	$notes = $voicemark . $intro;
	$notes =~ s/!fermata!/&/g;
	$notes =~ s/^[^\]]*\]//;
	$notes =~ s/[A-Ga-g]/z/g;
	$notes =~ s/[,']//g;
	$notes =~ s/&/!fermata!/g;
	#$notes = "\n";
	$last[$i] = $voicemark . $notes;
}
	#print STDERR "intro ",$voicemark . $notes;

#print intro
for ($i=0; $i < $numstaves; $i++) {
	print OUTFILE $last[$i];
	#print STDERR "last ",$last[$i];
}


# if there's no refrain, add a fifth pause after each verse 
if ( length ($lastbar) > 0) {
	$addrest = 0;
}
else {
	$addrest = 1;
}

# Clean up stuff that abc2midi can't handle
$core =~ s/!sintro!//g;
$core =~ s/!eintro!//g;
$core =~ s/!ferm!/!fermata!/g; # have fermatas in every voice
$core =~ s/!invertedfermata!/!fermata!/g; # have fermatas in every voice
if ( $addrest == 1 ) {
	$core =~ s/\|\]/z\/ |]/g; # add rests between verses
	# THIS IS SLOPPY - SHOULD LOOK AT L: to get a fifth note or maybe even Q: to get a # of milliseconds
}

#print relevant number of copies of core tune 
for ($i=0; $i < $numverses; $i++) {
	print OUTFILE $core;
}
print OUTFILE $lastbar;
	
close OUTFILE;
exit;



